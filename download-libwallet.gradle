/**
 * Downloads JNI binaries as version specified in the project-level gradle file.
 */
tasks.register("downloadLibwallet") {
    final def binariesDir = "${rootProject.projectDir}/libwallet/"
    final def armDir = "${rootProject.projectDir}/libwallet/arm64-v8a/"
    final def x64Dir = "${rootProject.projectDir}/libwallet/x86_64/"

    final def headerFile = "$libwalletHostURL$libwalletVersion/$libwalletHeader"
    final def armAFile = "$libwalletHostURL$libwalletVersion/$libwalletArmA"
    final def x64AFile = "$libwalletHostURL$libwalletVersion/$libwalletx64A"


    inputs.property "version", libwalletVersion
    outputs.dir binariesDir
    doLast {
        logger.info("Downloading binaries with version $libwalletVersion")

        final def files = [
                libwalletHeader,
                libwalletArmA,
                libwalletx64A]

        download {
            src(headerFile)
            dest binariesDir
        }

        copyFile(binariesDir, binariesDir, libwalletHeader, "wallet.h")


        download {
            src(x64AFile)
            dest binariesDir
        }
        copyFile(binariesDir, x64Dir, libwalletx64A, "libminotari_wallet_ffi.a")


        download {
            src(armAFile)
            dest binariesDir
        }
        copyFile(binariesDir, armDir, libwalletArmA, "libminotari_wallet_ffi.a")

        delete {
            delete fileTree(binariesDir) {
                include files.collect { fileName -> fileName }
            }
        }
    }
}

WorkResult copyFile(String fromDir, String toDir, String oldFileName, String newFileName) {
    copy {
        duplicatesStrategy = "include"
        from fromDir + oldFileName
        rename { String currentFileName -> renameFile(currentFileName, oldFileName, newFileName) }
        into toDir
    }
}

String renameFile(String fileName, String oldFileName, String newFileName) {
    println "Copying: $fileName"
    if (fileName == oldFileName) {
        return newFileName
    } else {
        return fileName
    }
}